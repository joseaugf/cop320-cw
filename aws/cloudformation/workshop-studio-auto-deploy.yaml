AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auto-deployment for Workshop Studio - Petshop Observability Demo'

Parameters:
  AssetsBucketName:
    Type: String
    Description: Workshop Studio assets bucket name
    Default: ws-assets-prod-iad-r-iad-ed304a55c2ca1aac
  
  AssetsBucketPrefix:
    Type: String
    Description: Workshop Studio assets prefix/key
    Default: your-workshop-id/petshop-demo.zip

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Workshop Assets Configuration
        Parameters:
          - AssetsBucketName
          - AssetsBucketPrefix

Resources:
  # S3 Bucket for CodeBuild artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'workshop-petshop-artifacts-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM Role for CodeBuild
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'WorkshopPetshop-CodeBuild-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Policies:
        - PolicyName: WorkshopAssetsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${AssetsBucketName}/*'
                  - !Sub 'arn:aws:s3:::${AssetsBucketName}'

  # CloudWatch Log Group
  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/codebuild/WorkshopPetshop-AutoDeploy
      RetentionInDays: 7

  # CodeBuild Project for Auto-Deployment
  AutoDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: WorkshopPetshop-AutoDeploy
      Description: 'Automatic deployment for workshop participants'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: S3
        Location: !Ref ArtifactsBucket
        Name: deployment-artifacts
        Packaging: ZIP
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ASSETS_BUCKET
            Value: !Ref AssetsBucketName
          - Name: ASSETS_KEY
            Value: !Ref AssetsBucketPrefix
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: STACK_NAME
            Value: petshop-observability-demo
          - Name: CLUSTER_NAME
            Value: petshop-demo-eks
          - Name: NAMESPACE
            Value: petshop-demo
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          
          phases:
            install:
              runtime-versions:
                python: 3.11
                nodejs: 18
                docker: 20
              commands:
                - echo "Installing dependencies..."
                - pip install --upgrade pip awscli boto3 pyyaml
                - npm install -g npm@latest
                - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                - chmod +x kubectl && mv kubectl /usr/local/bin/
                - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            
            pre_build:
              commands:
                - echo "Downloading workshop assets from S3..."
                - aws s3 cp s3://${ASSETS_BUCKET}/${ASSETS_KEY} ./petshop-demo.zip
                - unzip petshop-demo.zip
                - cd petshop-demo || cd .
                
                - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
                - echo "AWS Account ID: $AWS_ACCOUNT_ID"
                - echo "AWS Region: $AWS_DEFAULT_REGION"
                
                - export DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
                - echo "Generated database password"
                
                - |
                  aws secretsmanager create-secret \
                    --name "${STACK_NAME}/db-password" \
                    --secret-string "$DB_PASSWORD" \
                    --region $AWS_DEFAULT_REGION 2>/dev/null || \
                  aws secretsmanager update-secret \
                    --secret-id "${STACK_NAME}/db-password" \
                    --secret-string "$DB_PASSWORD" \
                    --region $AWS_DEFAULT_REGION
                
                - |
                  for service in catalog-service cart-service checkout-service feature-flag-service frontend; do
                    aws ecr describe-repositories --repository-names "petshop-demo/${service}" --region $AWS_DEFAULT_REGION 2>/dev/null || \
                    aws ecr create-repository \
                      --repository-name "petshop-demo/${service}" \
                      --image-scanning-configuration scanOnPush=true \
                      --region $AWS_DEFAULT_REGION
                  done
            
            build:
              commands:
                - echo "Deploying infrastructure..."
                - |
                  aws cloudformation deploy \
                    --template-file aws/cloudformation/eks-infrastructure.yaml \
                    --stack-name $STACK_NAME \
                    --parameter-overrides \
                      ClusterName=$CLUSTER_NAME \
                      DatabasePassword=$DB_PASSWORD \
                    --capabilities CAPABILITY_NAMED_IAM \
                    --region $AWS_DEFAULT_REGION \
                    --no-fail-on-empty-changeset
                
                - aws cloudformation wait stack-create-complete --stack-name $STACK_NAME --region $AWS_DEFAULT_REGION 2>/dev/null || true
                - aws cloudformation wait stack-update-complete --stack-name $STACK_NAME --region $AWS_DEFAULT_REGION 2>/dev/null || true
                
                - export VPC_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $AWS_DEFAULT_REGION --query 'Stacks[0].Outputs[?OutputKey==`VPCId`].OutputValue' --output text)
                - export DB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $AWS_DEFAULT_REGION --query 'Stacks[0].Outputs[?OutputKey==`DatabaseEndpoint`].OutputValue' --output text)
                
                - echo "Configuring kubectl..."
                - aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_DEFAULT_REGION
                
                - echo "Installing ALB Controller..."
                - chmod +x aws/install-alb-controller.sh
                - ./aws/install-alb-controller.sh || echo "ALB Controller setup completed"
                
                - echo "Setting up Application Signals..."
                - chmod +x aws/setup-application-signals.sh
                - ./aws/setup-application-signals.sh || echo "Application Signals setup completed"
                
                - echo "Building and pushing Docker images..."
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                
                - |
                  for service in catalog-service cart-service checkout-service feature-flag-service frontend; do
                    echo "Building $service..."
                    cd $service
                    if [ -f "package.json" ] && [ ! -f "package-lock.json" ]; then
                      npm install --package-lock-only
                    fi
                    docker buildx build --platform linux/amd64 \
                      -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/petshop-demo/${service}:latest \
                      --push .
                    cd ..
                  done
                
                - echo "Generating Kubernetes manifests..."
                - python3 scripts/generate-k8s-manifests.py
                
                - echo "Deploying to Kubernetes..."
                - kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
                - kubectl apply -f k8s-generated/10-postgresql.yaml
                - kubectl wait --for=condition=ready pod -l app=postgresql -n $NAMESPACE --timeout=300s
                - kubectl apply -f k8s-generated/20-catalog-service.yaml
                - kubectl apply -f k8s-generated/25-cart-service.yaml
                - kubectl apply -f k8s-generated/30-checkout-service.yaml
                - kubectl apply -f k8s-generated/35-feature-flag-service.yaml
                - kubectl apply -f k8s-generated/30-frontend.yaml
                - sleep 30
                - kubectl wait --for=condition=ready pod -l app=catalog-service -n $NAMESPACE --timeout=300s || true
                - kubectl wait --for=condition=ready pod -l app=cart-service -n $NAMESPACE --timeout=300s || true
                - kubectl wait --for=condition=ready pod -l app=checkout-service -n $NAMESPACE --timeout=300s || true
                - kubectl wait --for=condition=ready pod -l app=feature-flag-service -n $NAMESPACE --timeout=300s || true
                - kubectl wait --for=condition=ready pod -l app=frontend -n $NAMESPACE --timeout=300s || true
                - kubectl apply -f k8s-generated/40-adot-collector.yaml
                - kubectl apply -f k8s-generated/60-adot-collector.yaml
                - kubectl apply -f k8s-generated/61-application-signals.yaml
                - kubectl apply -f k8s-generated/62-fluent-bit-logs.yaml
                - kubectl apply -f k8s-generated/35-frontend-ingress.yaml
                - sleep 60
                
                - export ALB_URL=$(kubectl get ingress -n $NAMESPACE frontend-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                - echo "ALB URL: http://$ALB_URL"
                
                - echo "Creating CloudWatch resources..."
                - chmod +x aws/create-alarms-and-dashboard.sh aws/create-chaos-alarms.sh aws/create-log-based-alarms.sh
                - ./aws/create-alarms-and-dashboard.sh || echo "Alarms created"
                - ./aws/create-chaos-alarms.sh || echo "Chaos alarms created"
                - ./aws/create-log-based-alarms.sh || echo "Log alarms created"
                
                - |
                  for i in {1..30}; do
                    if curl -s -o /dev/null -w "%{http_code}" "http://$ALB_URL" | grep -q "200\|301\|302"; then
                      echo "ALB is ready!"
                      break
                    fi
                    echo "Waiting for ALB... attempt $i/30"
                    sleep 10
                  done
            
            post_build:
              commands:
                - export ALB_URL=$(kubectl get ingress -n $NAMESPACE frontend-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                - |
                  cat > deployment-info.json <<EOF
                  {
                    "application_url": "http://$ALB_URL",
                    "region": "$AWS_DEFAULT_REGION",
                    "cluster_name": "$CLUSTER_NAME",
                    "namespace": "$NAMESPACE",
                    "cloudwatch_dashboard": "https://console.aws.amazon.com/cloudwatch/home?region=$AWS_DEFAULT_REGION#dashboards:name=Petshop-Observability-Demo",
                    "xray_service_map": "https://console.aws.amazon.com/xray/home?region=$AWS_DEFAULT_REGION#/service-map"
                  }
                  EOF
                - cat deployment-info.json
                - echo "DEPLOYMENT COMPLETE!"
                - echo "Application URL: http://$ALB_URL"
          
          artifacts:
            files:
              - deployment-info.json
      TimeoutInMinutes: 120
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref CodeBuildLogGroup

  # Custom Resource to trigger CodeBuild automatically
  TriggerDeployment:
    Type: Custom::TriggerCodeBuild
    Properties:
      ServiceToken: !GetAtt TriggerFunction.Arn
      ProjectName: !Ref AutoDeployProject

  # Lambda function to trigger CodeBuild
  TriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'WorkshopPetshop-TriggerDeploy-${AWS::Region}'
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt TriggerFunctionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          
          codebuild = boto3.client('codebuild')
          
          def handler(event, context):
              print(f"Event: {json.dumps(event)}")
              
              try:
                  if event['RequestType'] == 'Create':
                      project_name = event['ResourceProperties']['ProjectName']
                      
                      # Start CodeBuild
                      response = codebuild.start_build(projectName=project_name)
                      build_id = response['build']['id']
                      
                      print(f"Started build: {build_id}")
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'BuildId': build_id,
                          'Message': 'Deployment started successfully'
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })

  # IAM Role for Lambda
  TriggerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Resource: !GetAtt AutoDeployProject.Arn

Outputs:
  CodeBuildProjectName:
    Description: CodeBuild project name
    Value: !Ref AutoDeployProject
    Export:
      Name: !Sub '${AWS::StackName}-ProjectName'
  
  BuildLogGroup:
    Description: CloudWatch log group for build logs
    Value: !Ref CodeBuildLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroup'
  
  DeploymentStatus:
    Description: Check deployment status
    Value: !Sub 'https://console.aws.amazon.com/codesuite/codebuild/${AWS::AccountId}/projects/${AutoDeployProject}?region=${AWS::Region}'
  
  Instructions:
    Description: What happens next
    Value: 'The deployment has been triggered automatically. Check CodeBuild console for progress. Deployment takes 30-45 minutes.'
